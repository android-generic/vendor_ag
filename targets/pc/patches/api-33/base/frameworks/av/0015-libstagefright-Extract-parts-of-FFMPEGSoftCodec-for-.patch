From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Michael Goffioul <michael.goffioul@lincor.com>
Date: Wed, 28 Apr 2021 20:16:34 -0400
Subject: [PATCH 15/19] libstagefright: Extract parts of FFMPEGSoftCodec for
 easier re-use

The code in Utils.cpp is also used in the MPEG2 extractor, which is now
compiled as a host library as well. As Utils.cpp was also using
FFMPEGSoftCodec, this introduced additional dependencies on the host
side (some of which were not available for host).

To avoid adding unnecessary dependencies on Utils.cpp, extract code from
FFMPEGSoftCodec into a separate file with less dependencies (same as
Utils.cpp), which can then be used in the extractor.
---
 media/libstagefright/Android.bp               |   6 +-
 media/libstagefright/FFMPEGSoftCodec.cpp      | 224 ++++--------------
 media/libstagefright/FFMPEGUtil.cpp           | 165 +++++++++++++
 media/libstagefright/Utils.cpp                |   6 +-
 .../media/stagefright/FFMPEGSoftCodec.h       |   8 -
 .../include/media/stagefright/FFMPEGUtil.h    |  39 +++
 6 files changed, 253 insertions(+), 195 deletions(-)
 create mode 100644 media/libstagefright/FFMPEGUtil.cpp
 create mode 100644 media/libstagefright/include/media/stagefright/FFMPEGUtil.h

diff --git a/media/libstagefright/Android.bp b/media/libstagefright/Android.bp
index 1e66574153..4440bf6c19 100644
--- a/media/libstagefright/Android.bp
+++ b/media/libstagefright/Android.bp
@@ -157,7 +157,7 @@ cc_library_static {
     min_sdk_version: "29",
 
     srcs: [
-        "FFMPEGSoftCodec.cpp",
+        "FFMPEGUtil.cpp",
         "Utils.cpp",
         "MediaSource.cpp",
         "HevcUtils.cpp",
@@ -165,9 +165,6 @@ cc_library_static {
 
     shared_libs: [
         "liblog",
-        "libstagefright_omx_utils",
-        "android.hidl.allocator@1.0",
-        "android.hidl.memory@1.0",
     ],
 
     export_include_dirs: [
@@ -312,6 +309,7 @@ cc_library {
         "CameraSource.cpp",
         "CameraSourceTimeLapse.cpp",
         "FFMPEGSoftCodec.cpp",
+        "FFMPEGUtil.cpp",
         "FrameDecoder.cpp",
         "HevcUtils.cpp",
         "InterfaceUtils.cpp",
diff --git a/media/libstagefright/FFMPEGSoftCodec.cpp b/media/libstagefright/FFMPEGSoftCodec.cpp
index 2a1689abce..8cc3ba2239 100644
--- a/media/libstagefright/FFMPEGSoftCodec.cpp
+++ b/media/libstagefright/FFMPEGSoftCodec.cpp
@@ -28,6 +28,7 @@
 #include <media/stagefright/foundation/ABitReader.h>
 
 #include <media/stagefright/FFMPEGSoftCodec.h>
+#include <media/stagefright/FFMPEGUtil.h>
 #include <media/stagefright/omx/OMXUtils.h>
 
 #include <media/stagefright/ACodec.h>
@@ -53,143 +54,6 @@
 
 namespace android {
 
-enum MetaKeyType{
-    INT32, INT64, STRING, DATA, CSD
-};
-
-struct MetaKeyEntry{
-    int MetaKey;
-    const char* MsgKey;
-    MetaKeyType KeyType;
-};
-
-static const MetaKeyEntry MetaKeyTable[] {
-   {kKeyAACAOT               , "aac-profile"            , INT32},
-   {kKeyArbitraryMode        , "use-arbitrary-mode"     , INT32},
-   {kKeyBitsPerRawSample     , "bits-per-raw-sample"    , INT32},
-   {kKeyBitRate              , "bitrate"                , INT32},
-   {kKeyBlockAlign           , "block-align"            , INT32},
-   {kKeyChannelCount         , "channel-count"          , INT32},
-   {kKeyCodecId              , "codec-id"               , INT32},
-   {kKeyCodedSampleBits      , "coded-sample-bits"      , INT32},
-   {kKeyFileFormat           , "file-format"            , INT32},
-   {kKeyRawCodecSpecificData , "raw-codec-specific-data", CSD},
-   {kKeyPcmEncoding          , "pcm-encoding"           , INT32},
-   {kKeyRVVersion            , "rv-version"             , INT32},
-   {kKeySampleFormat         , "sample-format"          , INT32},
-   {kKeySampleRate           , "sample-rate"            , INT32},
-   {kKeyWMAVersion           , "wma-version"            , INT32},  // int32_t
-   {kKeyWMVVersion           , "wmv-version"            , INT32},
-   {kKeyDivXVersion          , "divx-version"           , INT32},
-   {kKeyThumbnailTime        , "thumbnail-time"         , INT64},
-};
-
-const char* FFMPEGSoftCodec::getMsgKey(int key) {
-    static const size_t numMetaKeys =
-                     sizeof(MetaKeyTable) / sizeof(MetaKeyTable[0]);
-    size_t i;
-    for (i = 0; i < numMetaKeys; ++i) {
-        if (key == MetaKeyTable[i].MetaKey) {
-            return MetaKeyTable[i].MsgKey;
-        }
-    }
-    return "unknown";
-}
-
-void FFMPEGSoftCodec::convertMetaDataToMessageFF(
-        const MetaDataBase *meta, sp<AMessage> *format) {
-    const char * str_val;
-    int32_t int32_val;
-    int64_t int64_val;
-    uint32_t data_type;
-    const void * data;
-    size_t size;
-    static const size_t numMetaKeys =
-                     sizeof(MetaKeyTable) / sizeof(MetaKeyTable[0]);
-    size_t i;
-    for (i = 0; i < numMetaKeys; ++i) {
-        if (MetaKeyTable[i].KeyType == INT32 &&
-            meta->findInt32(MetaKeyTable[i].MetaKey, &int32_val)) {
-            ALOGV("found metakey %s of type int32", MetaKeyTable[i].MsgKey);
-            format->get()->setInt32(MetaKeyTable[i].MsgKey, int32_val);
-        } else if (MetaKeyTable[i].KeyType == INT64 &&
-                 meta->findInt64(MetaKeyTable[i].MetaKey, &int64_val)) {
-            ALOGV("found metakey %s of type int64", MetaKeyTable[i].MsgKey);
-            format->get()->setInt64(MetaKeyTable[i].MsgKey, int64_val);
-        } else if (MetaKeyTable[i].KeyType == STRING &&
-                 meta->findCString(MetaKeyTable[i].MetaKey, &str_val)) {
-            ALOGV("found metakey %s of type string", MetaKeyTable[i].MsgKey);
-            format->get()->setString(MetaKeyTable[i].MsgKey, str_val);
-        } else if ( (MetaKeyTable[i].KeyType == DATA ||
-                   MetaKeyTable[i].KeyType == CSD) &&
-                   meta->findData(MetaKeyTable[i].MetaKey, &data_type, &data, &size)) {
-            ALOGV("found metakey %s of type data", MetaKeyTable[i].MsgKey);
-            if (MetaKeyTable[i].KeyType == CSD) {
-                const char *mime;
-                CHECK(meta->findCString(kKeyMIMEType, &mime));
-                if (strcasecmp(mime, MEDIA_MIMETYPE_VIDEO_AVC)) {
-                    sp<ABuffer> buffer = new ABuffer(size);
-                    memcpy(buffer->data(), data, size);
-                    buffer->meta()->setInt32("csd", true);
-                    buffer->meta()->setInt64("timeUs", 0);
-                    format->get()->setBuffer("csd-0", buffer);
-                } else {
-                    const uint8_t *ptr = (const uint8_t *)data;
-                    CHECK(size >= 8);
-                    int seqLength = 0, picLength = 0;
-                    for (size_t i = 4; i < (size - 4); i++)
-                    {
-                        if ((*(ptr + i) == 0) && (*(ptr + i + 1) == 0) &&
-                           (*(ptr + i + 2) == 0) && (*(ptr + i + 3) == 1))
-                            seqLength = i;
-                    }
-                    sp<ABuffer> buffer = new ABuffer(seqLength);
-                    memcpy(buffer->data(), data, seqLength);
-                    buffer->meta()->setInt32("csd", true);
-                    buffer->meta()->setInt64("timeUs", 0);
-                    format->get()->setBuffer("csd-0", buffer);
-                    picLength=size-seqLength;
-                    sp<ABuffer> buffer1 = new ABuffer(picLength);
-                    memcpy(buffer1->data(), (const uint8_t *)data + seqLength, picLength);
-                    buffer1->meta()->setInt32("csd", true);
-                    buffer1->meta()->setInt64("timeUs", 0);
-                    format->get()->setBuffer("csd-1", buffer1);
-                }
-            } else {
-                sp<ABuffer> buffer = new ABuffer(size);
-                memcpy(buffer->data(), data, size);
-                format->get()->setBuffer(MetaKeyTable[i].MsgKey, buffer);
-            }
-        }
-    }
-}
-
-void FFMPEGSoftCodec::convertMessageToMetaDataFF(
-        const sp<AMessage> &msg, sp<MetaData> &meta) {
-    AString str_val;
-    int32_t int32_val;
-    int64_t int64_val;
-    static const size_t numMetaKeys =
-                     sizeof(MetaKeyTable) / sizeof(MetaKeyTable[0]);
-    size_t i;
-    for (i = 0; i < numMetaKeys; ++i) {
-        if (MetaKeyTable[i].KeyType == INT32 &&
-                msg->findInt32(MetaKeyTable[i].MsgKey, &int32_val)) {
-            ALOGV("found metakey %s of type int32", MetaKeyTable[i].MsgKey);
-            meta->setInt32(MetaKeyTable[i].MetaKey, int32_val);
-        } else if (MetaKeyTable[i].KeyType == INT64 &&
-                msg->findInt64(MetaKeyTable[i].MsgKey, &int64_val)) {
-            ALOGV("found metakey %s of type int64", MetaKeyTable[i].MsgKey);
-            meta->setInt64(MetaKeyTable[i].MetaKey, int64_val);
-        } else if (MetaKeyTable[i].KeyType == STRING &&
-                msg->findString(MetaKeyTable[i].MsgKey, &str_val)) {
-            ALOGV("found metakey %s of type string", MetaKeyTable[i].MsgKey);
-            meta->setCString(MetaKeyTable[i].MetaKey, str_val.c_str());
-        }
-    }
-}
-
-
 const char* FFMPEGSoftCodec::overrideComponentName(
         uint32_t /*quirks*/, const sp<MetaData> &meta, const char *mime, bool isEncoder) {
     const char* componentName = NULL;
@@ -453,7 +317,7 @@ status_t FFMPEGSoftCodec::setQCDIVXFormat(
     InitOMXParams(&paramDivX);
     paramDivX.nPortIndex = port_index;
     int32_t DivxVersion = 0;
-    if (!msg->findInt32(getMsgKey(kKeyDivXVersion), &DivxVersion)) {
+    if (!msg->findInt32(FFMPEGUtil::getMsgKey(kKeyDivXVersion), &DivxVersion)) {
         // Cannot find the key, the caller is skipping the container
         // and use codec directly, let determine divx version from
         // mime type
@@ -779,7 +643,7 @@ status_t FFMPEGSoftCodec::setWMVFormat(
     int32_t version = -1;
     OMX_VIDEO_PARAM_WMVTYPE paramWMV;
 
-    if (!msg->findInt32(getMsgKey(kKeyWMVVersion), &version)) {
+    if (!msg->findInt32(FFMPEGUtil::getMsgKey(kKeyWMVVersion), &version)) {
         ALOGE("WMV version not detected");
     }
 
@@ -811,7 +675,7 @@ status_t FFMPEGSoftCodec::setRVFormat(
     int32_t version = kTypeRVVer_G2;
     OMX_VIDEO_PARAM_RVTYPE paramRV;
 
-    if (!msg->findInt32(getMsgKey(kKeyRVVersion), &version)) {
+    if (!msg->findInt32(FFMPEGUtil::getMsgKey(kKeyRVVersion), &version)) {
         ALOGE("RV version not detected");
     }
 
@@ -846,13 +710,13 @@ status_t FFMPEGSoftCodec::setFFmpegVideoFormat(
 
     ALOGD("setFFmpegVideoFormat");
 
-    if (msg->findInt32(getMsgKey(kKeyWidth), &width)) {
+    if (msg->findInt32(FFMPEGUtil::getMsgKey(kKeyWidth), &width)) {
         ALOGE("No video width specified");
     }
-    if (msg->findInt32(getMsgKey(kKeyHeight), &height)) {
+    if (msg->findInt32(FFMPEGUtil::getMsgKey(kKeyHeight), &height)) {
         ALOGE("No video height specified");
     }
-    if (!msg->findInt32(getMsgKey(kKeyCodecId), &codec_id)) {
+    if (!msg->findInt32(FFMPEGUtil::getMsgKey(kKeyCodecId), &codec_id)) {
         ALOGE("No codec id sent for FFMPEG catch-all codec!");
     }
 
@@ -881,9 +745,9 @@ status_t FFMPEGSoftCodec::setRawAudioFormat(
     int32_t sampleRate = 0;
     AudioEncoding encoding = kAudioEncodingPcm16bit;
 
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate));
-    if (!msg->findInt32(getMsgKey(kKeyPcmEncoding), (int32_t*)&encoding)) {
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate));
+    if (!msg->findInt32(FFMPEGUtil::getMsgKey(kKeyPcmEncoding), (int32_t*)&encoding)) {
         ALOGD("No PCM format specified, using 16 bit");
     }
 
@@ -968,26 +832,26 @@ status_t FFMPEGSoftCodec::setWMAFormat(
 
     OMX_AUDIO_PARAM_WMATYPE paramWMA;
 
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate));
-    CHECK(msg->findInt32(getMsgKey(kKeyBitRate), &bitRate));
-    if (!msg->findInt32(getMsgKey(kKeyBlockAlign), &blockAlign)) {
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyBitRate), &bitRate));
+    if (!msg->findInt32(FFMPEGUtil::getMsgKey(kKeyBlockAlign), &blockAlign)) {
         // we should be last on the codec list, but another sniffer may
         // have handled it and there is no hardware codec.
-        if (!msg->findInt32(getMsgKey(kKeyWMABlockAlign), &blockAlign)) {
+        if (!msg->findInt32(FFMPEGUtil::getMsgKey(kKeyWMABlockAlign), &blockAlign)) {
             return ERROR_UNSUPPORTED;
         }
     }
 
     // mm-parser may want a different bit depth
-    if (msg->findInt32(getMsgKey(kKeyWMABitspersample), &bitsPerSample)) {
-        msg->setInt32(getMsgKey(kKeyPcmEncoding), (int32_t)bitsToAudioEncoding(bitsPerSample));
+    if (msg->findInt32(FFMPEGUtil::getMsgKey(kKeyWMABitspersample), &bitsPerSample)) {
+        msg->setInt32(FFMPEGUtil::getMsgKey(kKeyPcmEncoding), (int32_t)bitsToAudioEncoding(bitsPerSample));
     }
 
     ALOGV("Channels: %d, SampleRate: %d, BitRate: %d, blockAlign: %d",
             numChannels, sampleRate, bitRate, blockAlign);
 
-    CHECK(msg->findInt32(getMsgKey(kKeyWMAVersion), &version));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyWMAVersion), &version));
 
     status_t err = setRawAudioFormat(msg, OMXhandle, node);
     if (err != OK)
@@ -1026,8 +890,8 @@ status_t FFMPEGSoftCodec::setVORBISFormat(
     int32_t sampleRate = 0;
     OMX_AUDIO_PARAM_VORBISTYPE param;
 
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate));
 
     ALOGV("Channels: %d, SampleRate: %d",
             numChannels, sampleRate);
@@ -1060,10 +924,10 @@ status_t FFMPEGSoftCodec::setRAFormat(
     int32_t blockAlign = 0;
     OMX_AUDIO_PARAM_RATYPE paramRA;
 
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate));
-    msg->findInt32(getMsgKey(kKeyBitRate), &bitRate);
-    CHECK(msg->findInt32(getMsgKey(kKeyBlockAlign), &blockAlign));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate));
+    msg->findInt32(FFMPEGUtil::getMsgKey(kKeyBitRate), &bitRate);
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyBlockAlign), &blockAlign));
 
     ALOGV("Channels: %d, SampleRate: %d, BitRate: %d, blockAlign: %d",
             numChannels, sampleRate, bitRate, blockAlign);
@@ -1099,9 +963,9 @@ status_t FFMPEGSoftCodec::setFLACFormat(
     AudioEncoding encoding = kAudioEncodingPcm16bit;
     OMX_AUDIO_PARAM_FLACTYPE param;
 
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate));
-    msg->findInt32(getMsgKey(kKeyPcmEncoding), (int32_t*)&encoding);
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate));
+    msg->findInt32(FFMPEGUtil::getMsgKey(kKeyPcmEncoding), (int32_t*)&encoding);
 
     ALOGV("Channels: %d, SampleRate: %d Encoding: %d",
             numChannels, sampleRate, encoding);
@@ -1133,8 +997,8 @@ status_t FFMPEGSoftCodec::setMP2Format(
     int32_t sampleRate = 0;
     OMX_AUDIO_PARAM_MP2TYPE param;
 
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate));
 
     ALOGV("Channels: %d, SampleRate: %d",
             numChannels, sampleRate);
@@ -1165,8 +1029,8 @@ status_t FFMPEGSoftCodec::setAC3Format(
     int32_t sampleRate = 0;
     OMX_AUDIO_PARAM_ANDROID_AC3TYPE param;
 
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate));
 
     ALOGV("Channels: %d, SampleRate: %d",
             numChannels, sampleRate);
@@ -1198,9 +1062,9 @@ status_t FFMPEGSoftCodec::setAPEFormat(
     AudioEncoding encoding = kAudioEncodingPcm16bit;
     OMX_AUDIO_PARAM_APETYPE param;
 
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate));
-    CHECK(msg->findInt32(getMsgKey(kKeyPcmEncoding), (int32_t*)&encoding));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyPcmEncoding), (int32_t*)&encoding));
 
     ALOGV("Channels:%d, SampleRate:%d, Encoding:%d",
             numChannels, sampleRate, encoding);
@@ -1232,8 +1096,8 @@ status_t FFMPEGSoftCodec::setDTSFormat(
     int32_t sampleRate = 0;
     OMX_AUDIO_PARAM_DTSTYPE param;
 
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate));
 
     ALOGV("Channels: %d, SampleRate: %d",
             numChannels, sampleRate);
@@ -1272,14 +1136,14 @@ status_t FFMPEGSoftCodec::setFFmpegAudioFormat(
 
     ALOGD("setFFmpegAudioFormat");
 
-    CHECK(msg->findInt32(getMsgKey(kKeyCodecId), &codec_id));
-    CHECK(msg->findInt32(getMsgKey(kKeyChannelCount), &numChannels));
-    CHECK(msg->findInt32(getMsgKey(kKeySampleFormat), &sampleFormat));
-    msg->findInt32(getMsgKey(kKeyBitRate), &bitRate);
-    msg->findInt32(getMsgKey(kKeySampleRate), &sampleRate);
-    msg->findInt32(getMsgKey(kKeyBlockAlign), &blockAlign);
-    msg->findInt32(getMsgKey(kKeyCodedSampleBits), &codedSampleBits);
-    msg->findInt32(getMsgKey(kKeyPcmEncoding), (int32_t*)&encoding);
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyCodecId), &codec_id));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeyChannelCount), &numChannels));
+    CHECK(msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleFormat), &sampleFormat));
+    msg->findInt32(FFMPEGUtil::getMsgKey(kKeyBitRate), &bitRate);
+    msg->findInt32(FFMPEGUtil::getMsgKey(kKeySampleRate), &sampleRate);
+    msg->findInt32(FFMPEGUtil::getMsgKey(kKeyBlockAlign), &blockAlign);
+    msg->findInt32(FFMPEGUtil::getMsgKey(kKeyCodedSampleBits), &codedSampleBits);
+    msg->findInt32(FFMPEGUtil::getMsgKey(kKeyPcmEncoding), (int32_t*)&encoding);
 
     status_t err = setRawAudioFormat(msg, OMXhandle, node);
     if (err != OK)
diff --git a/media/libstagefright/FFMPEGUtil.cpp b/media/libstagefright/FFMPEGUtil.cpp
new file mode 100644
index 0000000000..76a7658520
--- /dev/null
+++ b/media/libstagefright/FFMPEGUtil.cpp
@@ -0,0 +1,165 @@
+/*
+ * Copyright (C) 2014 The CyanogenMod Project
+ * Copyright (C) 2021 The Android-x86 Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+//#define LOG_NDEBUG 0
+#define LOG_TAG "FFMPEGUtil"
+#include <utils/Log.h>
+
+#include <media/stagefright/foundation/ADebug.h>
+#include <media/stagefright/foundation/ABuffer.h>
+#include <media/stagefright/MediaDefs.h>
+#include <media/stagefright/FFMPEGUtil.h>
+
+namespace android {
+
+enum MetaKeyType{
+    INT32, INT64, STRING, DATA, CSD
+};
+
+struct MetaKeyEntry{
+    int MetaKey;
+    const char* MsgKey;
+    MetaKeyType KeyType;
+};
+
+static const MetaKeyEntry MetaKeyTable[] {
+   {kKeyAACAOT               , "aac-profile"            , INT32},
+   {kKeyArbitraryMode        , "use-arbitrary-mode"     , INT32},
+   {kKeyBitsPerRawSample     , "bits-per-raw-sample"    , INT32},
+   {kKeyBitRate              , "bitrate"                , INT32},
+   {kKeyBlockAlign           , "block-align"            , INT32},
+   {kKeyChannelCount         , "channel-count"          , INT32},
+   {kKeyCodecId              , "codec-id"               , INT32},
+   {kKeyCodedSampleBits      , "coded-sample-bits"      , INT32},
+   {kKeyFileFormat           , "file-format"            , INT32},
+   {kKeyRawCodecSpecificData , "raw-codec-specific-data", CSD},
+   {kKeyPcmEncoding          , "pcm-encoding"           , INT32},
+   {kKeyRVVersion            , "rv-version"             , INT32},
+   {kKeySampleFormat         , "sample-format"          , INT32},
+   {kKeySampleRate           , "sample-rate"            , INT32},
+   {kKeyWMAVersion           , "wma-version"            , INT32},  // int32_t
+   {kKeyWMVVersion           , "wmv-version"            , INT32},
+   {kKeyDivXVersion          , "divx-version"           , INT32},
+   {kKeyThumbnailTime        , "thumbnail-time"         , INT64},
+};
+
+const char* FFMPEGUtil::getMsgKey(int key) {
+    static const size_t numMetaKeys =
+                     sizeof(MetaKeyTable) / sizeof(MetaKeyTable[0]);
+    size_t i;
+    for (i = 0; i < numMetaKeys; ++i) {
+        if (key == MetaKeyTable[i].MetaKey) {
+            return MetaKeyTable[i].MsgKey;
+        }
+    }
+    return "unknown";
+}
+
+void FFMPEGUtil::convertMetaDataToMessageFF(
+        const MetaDataBase *meta, sp<AMessage> *format) {
+    const char * str_val;
+    int32_t int32_val;
+    int64_t int64_val;
+    uint32_t data_type;
+    const void * data;
+    size_t size;
+    static const size_t numMetaKeys =
+                     sizeof(MetaKeyTable) / sizeof(MetaKeyTable[0]);
+    size_t i;
+    for (i = 0; i < numMetaKeys; ++i) {
+        if (MetaKeyTable[i].KeyType == INT32 &&
+            meta->findInt32(MetaKeyTable[i].MetaKey, &int32_val)) {
+            ALOGV("found metakey %s of type int32", MetaKeyTable[i].MsgKey);
+            format->get()->setInt32(MetaKeyTable[i].MsgKey, int32_val);
+        } else if (MetaKeyTable[i].KeyType == INT64 &&
+                 meta->findInt64(MetaKeyTable[i].MetaKey, &int64_val)) {
+            ALOGV("found metakey %s of type int64", MetaKeyTable[i].MsgKey);
+            format->get()->setInt64(MetaKeyTable[i].MsgKey, int64_val);
+        } else if (MetaKeyTable[i].KeyType == STRING &&
+                 meta->findCString(MetaKeyTable[i].MetaKey, &str_val)) {
+            ALOGV("found metakey %s of type string", MetaKeyTable[i].MsgKey);
+            format->get()->setString(MetaKeyTable[i].MsgKey, str_val);
+        } else if ( (MetaKeyTable[i].KeyType == DATA ||
+                   MetaKeyTable[i].KeyType == CSD) &&
+                   meta->findData(MetaKeyTable[i].MetaKey, &data_type, &data, &size)) {
+            ALOGV("found metakey %s of type data", MetaKeyTable[i].MsgKey);
+            if (MetaKeyTable[i].KeyType == CSD) {
+                const char *mime;
+                CHECK(meta->findCString(kKeyMIMEType, &mime));
+                if (strcasecmp(mime, MEDIA_MIMETYPE_VIDEO_AVC)) {
+                    sp<ABuffer> buffer = new ABuffer(size);
+                    memcpy(buffer->data(), data, size);
+                    buffer->meta()->setInt32("csd", true);
+                    buffer->meta()->setInt64("timeUs", 0);
+                    format->get()->setBuffer("csd-0", buffer);
+                } else {
+                    const uint8_t *ptr = (const uint8_t *)data;
+                    CHECK(size >= 8);
+                    int seqLength = 0, picLength = 0;
+                    for (size_t i = 4; i < (size - 4); i++)
+                    {
+                        if ((*(ptr + i) == 0) && (*(ptr + i + 1) == 0) &&
+                           (*(ptr + i + 2) == 0) && (*(ptr + i + 3) == 1))
+                            seqLength = i;
+                    }
+                    sp<ABuffer> buffer = new ABuffer(seqLength);
+                    memcpy(buffer->data(), data, seqLength);
+                    buffer->meta()->setInt32("csd", true);
+                    buffer->meta()->setInt64("timeUs", 0);
+                    format->get()->setBuffer("csd-0", buffer);
+                    picLength=size-seqLength;
+                    sp<ABuffer> buffer1 = new ABuffer(picLength);
+                    memcpy(buffer1->data(), (const uint8_t *)data + seqLength, picLength);
+                    buffer1->meta()->setInt32("csd", true);
+                    buffer1->meta()->setInt64("timeUs", 0);
+                    format->get()->setBuffer("csd-1", buffer1);
+                }
+            } else {
+                sp<ABuffer> buffer = new ABuffer(size);
+                memcpy(buffer->data(), data, size);
+                format->get()->setBuffer(MetaKeyTable[i].MsgKey, buffer);
+            }
+        }
+    }
+}
+
+void FFMPEGUtil::convertMessageToMetaDataFF(
+        const sp<AMessage> &msg, sp<MetaData> &meta) {
+    AString str_val;
+    int32_t int32_val;
+    int64_t int64_val;
+    static const size_t numMetaKeys =
+                     sizeof(MetaKeyTable) / sizeof(MetaKeyTable[0]);
+    size_t i;
+    for (i = 0; i < numMetaKeys; ++i) {
+        if (MetaKeyTable[i].KeyType == INT32 &&
+                msg->findInt32(MetaKeyTable[i].MsgKey, &int32_val)) {
+            ALOGV("found metakey %s of type int32", MetaKeyTable[i].MsgKey);
+            meta->setInt32(MetaKeyTable[i].MetaKey, int32_val);
+        } else if (MetaKeyTable[i].KeyType == INT64 &&
+                msg->findInt64(MetaKeyTable[i].MsgKey, &int64_val)) {
+            ALOGV("found metakey %s of type int64", MetaKeyTable[i].MsgKey);
+            meta->setInt64(MetaKeyTable[i].MetaKey, int64_val);
+        } else if (MetaKeyTable[i].KeyType == STRING &&
+                msg->findString(MetaKeyTable[i].MsgKey, &str_val)) {
+            ALOGV("found metakey %s of type string", MetaKeyTable[i].MsgKey);
+            meta->setCString(MetaKeyTable[i].MetaKey, str_val.c_str());
+        }
+    }
+}
+
+}
diff --git a/media/libstagefright/Utils.cpp b/media/libstagefright/Utils.cpp
index 4a5634688f..d7fe5c6806 100644
--- a/media/libstagefright/Utils.cpp
+++ b/media/libstagefright/Utils.cpp
@@ -44,7 +44,7 @@
 #include <media/AudioParameter.h>
 #include <system/audio.h>
 
-#include <media/stagefright/FFMPEGSoftCodec.h>
+#include <media/stagefright/FFMPEGUtil.h>
 
 // TODO : Remove the defines once mainline media is built against NDK >= 31.
 // The mp4 extractor is part of mainline and builds against NDK 29 as of
@@ -1568,7 +1568,7 @@ status_t convertMetaDataToMessage(
         msg->setBuffer("csd-2", buffer);
     }
 
-    FFMPEGSoftCodec::convertMetaDataToMessageFF(meta, &msg);
+    FFMPEGUtil::convertMetaDataToMessageFF(meta, &msg);
     *format = msg;
 
 #if 0
@@ -2276,7 +2276,7 @@ status_t convertMessageToMetaData(const sp<AMessage> &msg, sp<MetaData> &meta) {
     }
     // XXX TODO add whatever other keys there are
 
-    FFMPEGSoftCodec::convertMessageToMetaDataFF(msg, meta);
+    FFMPEGUtil::convertMessageToMetaDataFF(msg, meta);
 
 #if 0
     ALOGI("convertMessageToMetaData from %s to:", msg->debugString(0).c_str());
diff --git a/media/libstagefright/include/media/stagefright/FFMPEGSoftCodec.h b/media/libstagefright/include/media/stagefright/FFMPEGSoftCodec.h
index 9a51908b22..b5c03716d1 100644
--- a/media/libstagefright/include/media/stagefright/FFMPEGSoftCodec.h
+++ b/media/libstagefright/include/media/stagefright/FFMPEGSoftCodec.h
@@ -38,12 +38,6 @@ struct FFMPEGSoftCodec {
         kPortIndexOutput = 1
     };
 
-    static void convertMessageToMetaDataFF(
-            const sp<AMessage> &msg, sp<MetaData> &meta);
-
-    static void convertMetaDataToMessageFF(
-        const MetaDataBase *meta, sp<AMessage> *format);
-
     static const char* overrideComponentName(
             uint32_t quirks, const sp<MetaData> &meta,
             const char *mime, bool isEncoder);
@@ -73,8 +67,6 @@ struct FFMPEGSoftCodec {
             sp<AMessage> &notify, sp<IOMX> OMXhandle, sp<IOMXNode> node);
 
 private:
-    static const char* getMsgKey(int key);
-
     static status_t setWMVFormat(
             const sp<AMessage> &msg, sp<IOMX> OMXhandle,
             sp<IOMXNode> node);
diff --git a/media/libstagefright/include/media/stagefright/FFMPEGUtil.h b/media/libstagefright/include/media/stagefright/FFMPEGUtil.h
new file mode 100644
index 0000000000..cfa05ac5b6
--- /dev/null
+++ b/media/libstagefright/include/media/stagefright/FFMPEGUtil.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2014 The CyanogenMod Project
+ * Copyright (C) 2021 The Android-x86 Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#ifndef FFMPEG_UTIL_H
+#define FFMPEG_UTIL_H
+
+#include <media/stagefright/foundation/AMessage.h>
+#include <media/stagefright/MetaData.h>
+
+namespace android {
+
+struct FFMPEGUtil {
+
+    static void convertMessageToMetaDataFF(
+            const sp<AMessage> &msg, sp<MetaData> &meta);
+
+    static void convertMetaDataToMessageFF(
+        const MetaDataBase *meta, sp<AMessage> *format);
+
+    static const char* getMsgKey(int key);
+
+};
+
+}
+
+#endif
