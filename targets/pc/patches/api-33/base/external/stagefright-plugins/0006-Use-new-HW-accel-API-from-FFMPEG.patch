From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Michael Goffioul <michael.goffioul@gmail.com>
Date: Mon, 3 Oct 2022 22:02:23 +0200
Subject: [PATCH 06/13] Use new HW accel API from FFMPEG

This removes dependency on fftools source code and allows to migrate to
newer version of FFMPEG. Initialize VAAPI device before opening the
codec, instead of during format negotiation (which leads to memory leak
when multi-threading is enabled, even if thread_count is reset to 1
during get_format).

Validated with VA-API and FFMPEG 3.4.11 (requires updated ffmpeg repo).
---
 omx/SoftFFmpegVideo.cpp |   2 +-
 utils/ffmpeg_hwaccel.c  | 209 +++++++++++++---------------------------
 utils/ffmpeg_utils.cpp  |   3 +
 3 files changed, 71 insertions(+), 143 deletions(-)

diff --git a/omx/SoftFFmpegVideo.cpp b/omx/SoftFFmpegVideo.cpp
index 4bfc1c1..27a53f4 100644
--- a/omx/SoftFFmpegVideo.cpp
+++ b/omx/SoftFFmpegVideo.cpp
@@ -141,7 +141,6 @@ status_t SoftFFmpegVideo::initDecoder(enum AVCodecID codecID) {
     mCtx->extradata = NULL;
     mCtx->width = mWidth;
     mCtx->height = mHeight;
-    ffmpeg_hwaccel_init(mCtx);
     ALOGD("%p initDecoder: %p", this, mCtx);
     return OK;
 }
@@ -427,6 +426,7 @@ int32_t SoftFFmpegVideo::openDecoder() {
     }
 
     setDefaultCtx(mCtx, mCtx->codec);
+    ffmpeg_hwaccel_init(mCtx);
 
     ALOGD("begin to open ffmpeg decoder(%s) now",
             avcodec_get_name(mCtx->codec_id));
diff --git a/utils/ffmpeg_hwaccel.c b/utils/ffmpeg_hwaccel.c
index 33c84fb..af9f18d 100644
--- a/utils/ffmpeg_hwaccel.c
+++ b/utils/ffmpeg_hwaccel.c
@@ -5,169 +5,94 @@
 
 #include "config.h"
 #include "ffmpeg_hwaccel.h"
-#include "libavutil/hwcontext.h"
 #include "libavutil/opt.h"
-#include "libavutil/pixdesc.h"
-#ifdef LIBAV_CONFIG_H
-#include "avtools/avconv.h"
-#else
-#include "ffmpeg.h"
-#endif
-
-/* BEGIN: Extracted from ffmpeg_opt.c */
-
-const HWAccel hwaccels[] = {
-#if HAVE_VDPAU_X11
-    { "vdpau", vdpau_init, HWACCEL_VDPAU, AV_PIX_FMT_VDPAU },
-#endif
-#if CONFIG_VDA
-    { "vda", videotoolbox_init, HWACCEL_VDA, AV_PIX_FMT_VDA },
-#endif
-#if CONFIG_LIBMFX
-    { "qsv", qsv_init, HWACCEL_QSV, AV_PIX_FMT_QSV },
-#endif
-#if CONFIG_VAAPI
-#ifdef LIBAV_CONFIG_H
-    { "vaapi", hwaccel_decode_init, HWACCEL_VAAPI, AV_PIX_FMT_VAAPI, AV_HWDEVICE_TYPE_VAAPI },
-#else
-    { "vaapi", vaapi_decode_init, HWACCEL_VAAPI, AV_PIX_FMT_VAAPI },
-#endif
-#endif
-#if CONFIG_CUVID
-    { "cuvid", cuvid_init, HWACCEL_CUVID, AV_PIX_FMT_CUDA },
-#endif
-    { 0, 0, HWACCEL_NONE, AV_PIX_FMT_NONE },
-};
-
-/* END: Extracted from ffmpeg_opt.c */
-
-int ffmpeg_hwaccel_get_frame(AVCodecContext *avctx, AVFrame *frame)
-{
-    int err;
-    InputStream *ist = avctx->opaque;
-
-    if (ist && ist->hwaccel_retrieve_data && frame->format == ist->hwaccel_pix_fmt) {
-        ALOGV_IF(DEBUG_HWACCEL, "ffmpeg_hwaccel_get_frame ctx=%p ist=%p format=%d hwaccel_pix_fmt=%d hwaccel_id=%d",
-                avctx, ist, frame->format, ist->hwaccel_pix_fmt, ist->hwaccel_id);
-        err = ist->hwaccel_retrieve_data(avctx, frame);
-        if (err == 0)
-            ist->hwaccel_retrieved_pix_fmt = frame->format;
-    } else {
-        err = 0;
-    }
-
-    return err;
-}
 
-/* BEGIN: Extracted from ffmpeg.c */
-
-static const HWAccel *get_hwaccel(enum AVPixelFormat pix_fmt)
-{
-    int i;
-    for (i = 0; hwaccels[i].name; i++)
-        if (hwaccels[i].pix_fmt == pix_fmt)
-            return &hwaccels[i];
-    return NULL;
-}
-
-static enum AVPixelFormat get_format(AVCodecContext *s, const enum AVPixelFormat *pix_fmts)
-{
-    InputStream *ist = s->opaque;
-    const enum AVPixelFormat *p;
-    int ret = -1;
+int ffmpeg_hwaccel_init(AVCodecContext *avctx) {
+    if (!property_get_bool("media.sf.hwaccel", 0))
+        return 0;
 
-    for (p = pix_fmts; *p != AV_PIX_FMT_NONE; p++) {
-        ALOGD_IF(DEBUG_HWACCEL, "check %td pix_fmts=%d", p - pix_fmts, *p);
-        const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(*p);
-        const HWAccel *hwaccel;
+    // Find codec information. At this point, AVCodecContext.codec may not be
+    // set yet, so retrieve our own version using AVCodecContext.codec_id.
+    const AVCodec* codec = avcodec_find_decoder(avctx->codec_id);
+    if (!codec) {
+        ALOGE("ffmpeg_hwaccel_init: codec not found = %d", avctx->codec_id);
+        return 0;
+    }
 
-        if (!(desc->flags & AV_PIX_FMT_FLAG_HWACCEL))
+    // Find a working HW configuration for this codec.
+    for (int i = 0;; i++) {
+        const AVCodecHWConfig* config = avcodec_get_hw_config(codec, i);
+        if (!config) {
+            // No more HW configs available.
             break;
+        }
 
-        hwaccel = get_hwaccel(*p);
-        if (!hwaccel ||
-                (ist->active_hwaccel_id && ist->active_hwaccel_id != hwaccel->id) ||
-                (ist->hwaccel_id != HWACCEL_AUTO && ist->hwaccel_id != hwaccel->id))
-            continue;
-
-        ret = hwaccel->init(s);
-        if (ret < 0) {
-            if (ist->hwaccel_id == hwaccel->id) {
-                av_log(NULL, AV_LOG_FATAL,
-                       "%s hwaccel requested for input stream #%d, "
-                       "but cannot be initialized.\n", hwaccel->name, ist->file_index);
-            }
+        // Try to initialize HW device.
+        if (av_hwdevice_ctx_create(&avctx->hw_device_ctx, config->device_type, "android", NULL, 0) < 0) {
+            // Initialization failed, skip this HW config.
+            ALOGD_IF(DEBUG_HWACCEL, "ffmpeg_hwaccel_init: failed to initialize HW device %s",
+                     av_hwdevice_get_type_name(config->device_type));
             continue;
         }
-        if (ist->hw_frames_ctx) {
-            s->hw_frames_ctx = av_buffer_ref(ist->hw_frames_ctx);
-            if (!s->hw_frames_ctx)
-                return AV_PIX_FMT_NONE;
-        }
-        ist->active_hwaccel_id = hwaccel->id;
-        ist->hwaccel_pix_fmt = *p;
-        s->thread_count = 1;
-#ifdef LIBAV_CONFIG_H
-        ist->dec = s->codec;
-        ist->dec_ctx = avcodec_alloc_context3(ist->dec);
-        avcodec_copy_context(ist->dec_ctx, s);
-        ret = hw_device_setup_for_decode(ist);
-        s->hw_device_ctx = ist->dec_ctx->hw_device_ctx;
-        ALOGD_IF(DEBUG_HWACCEL, "hw_device_setup_for_decode: %d ctx=%p hw_device_ctx=%p pix_fmts=%d", ret, s, s->hw_device_ctx, *p);
-#endif
-        break;
-    }
 
-    ALOGI("hw codec %s %sabled: s=%p ist=%p pix_fmts=%d", avcodec_get_name(s->codec_id), ret ? "dis" : "en", s, ist, *p);
-    return *p;
-}
+        // Use refcounted frames.
+        av_opt_set_int(avctx, "refcounted_frames", 1, 0);
+        // Don't use multithreading.
+        avctx->thread_count = 1;
 
-static int get_buffer(AVCodecContext *s, AVFrame *frame, int flags)
-{
-    InputStream *ist = s->opaque;
-    ALOGV_IF(DEBUG_HWACCEL, "get_buffer: s=%p ist=%p format=%d hwaccel_pix_fmt=%d",
-            s, ist, frame->format, ist->hwaccel_pix_fmt);
+        // HW device created, stop here.
+        ALOGD("ffmpeg_hwaccel_init: %p [%s], hw device = %s", avctx, codec->name,
+              av_hwdevice_get_type_name(config->device_type));
+        break;
+    }
 
-    if (ist->hwaccel_get_buffer && frame->format == ist->hwaccel_pix_fmt)
-        return ist->hwaccel_get_buffer(s, frame, flags);
+    if (!avctx->hw_device_ctx) {
+        ALOGD("ffmpeg_hwaccel_init: no HW accel found for codec = %s", codec->name);
+    }
 
-    return avcodec_default_get_buffer2(s, frame, flags);
+    return 0;
 }
 
-/* END: Extracted from ffmpeg.c */
+void ffmpeg_hwaccel_deinit(AVCodecContext *avctx __unused) {
+}
 
-int ffmpeg_hwaccel_init(AVCodecContext *avctx)
-{
-    if (!property_get_bool("media.sf.hwaccel", 0))
+int ffmpeg_hwaccel_get_frame(AVCodecContext *avctx __unused, AVFrame *frame) {
+    if (!frame->hw_frames_ctx) {
+        // Frame is not hw-accel
         return 0;
+    }
+
+    AVFrame* output;
+    int err;
 
-    InputStream *ist = av_mallocz(sizeof(*ist));
-    if (!ist)
+    output = av_frame_alloc();
+    if (!output) {
         return AVERROR(ENOMEM);
+    }
 
-    ist->hwaccel_id = HWACCEL_AUTO;
-    ist->hwaccel_device = "android";
-    ist->hwaccel_output_format = AV_PIX_FMT_YUV420P;
+    output->format = AV_PIX_FMT_YUV420P;
 
-    avctx->opaque = ist;
-    avctx->get_format = get_format;
-    avctx->get_buffer2 = get_buffer;
-    avctx->thread_safe_callbacks = 1;
-    av_opt_set_int(avctx, "refcounted_frames", 1, 0);
+    err = av_hwframe_transfer_data(output, frame, 0);
+    if (err < 0) {
+        ALOGE("ffmpeg_hwaccel_get_frame failed to transfer data: %s (%08x)",
+              av_err2str(err), err);
+        goto fail;
+    }
+
+    err = av_frame_copy_props(output, frame);
+    if (err < 0) {
+        ALOGE("ffmpeg_hwaccel_get_frame failed to copy frame properties: %s (%08x)",
+              av_err2str(err), err);
+        goto fail;
+    }
+
+    av_frame_unref(frame);
+    av_frame_move_ref(frame, output);
+    av_frame_free(&output);
 
-    ALOGD_IF(DEBUG_HWACCEL, "ffmpeg_hwaccel_init ctx=%p ist=%p", avctx, ist);
     return 0;
-}
 
-void ffmpeg_hwaccel_deinit(AVCodecContext *avctx)
-{
-    if (avctx->opaque) {
-        InputStream *ist = avctx->opaque;
-        if (ist->hwaccel_uninit)
-            ist->hwaccel_uninit(avctx);
-#ifdef LIBAV_CONFIG_H
-        avcodec_free_context(&ist->dec_ctx);
-#endif
-        av_freep(&avctx->opaque);
-    }
+fail:
+    av_frame_free(&output);
+    return err;
 }
diff --git a/utils/ffmpeg_utils.cpp b/utils/ffmpeg_utils.cpp
index e7ca34b..d923c2c 100644
--- a/utils/ffmpeg_utils.cpp
+++ b/utils/ffmpeg_utils.cpp
@@ -204,6 +204,8 @@ status_t initFFmpeg()
         /* register android source */
         ffmpeg_register_android_source();
 
+        ALOGI("FFMPEG initialized: %s", av_version_info());
+
         if (av_lockmgr_register(lockmgr)) {
             ALOGE("could not initialize lock manager!");
             ret = NO_INIT;
@@ -228,6 +230,7 @@ void deInitFFmpeg()
     if(s_ref_count == 0) {
         av_lockmgr_register(NULL);
         avformat_network_deinit();
+        ALOGD("FFMPEG deinitialized");
     }
 
     pthread_mutex_unlock(&s_init_mutex);
