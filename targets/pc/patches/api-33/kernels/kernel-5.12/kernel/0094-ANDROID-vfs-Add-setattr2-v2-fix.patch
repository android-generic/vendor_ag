From 83e7c0d850f7a53a998aac15f236a2609d2407a9 Mon Sep 17 00:00:00 2001
From: Mauro Rossi <issor.oruam@gmail.com>
Date: Fri, 5 Mar 2021 22:33:33 +0100
Subject: [PATCH 094/100] ANDROID: vfs: Add setattr2 (v2 fix)

---
 fs/attr.c          |  9 +++++----
 fs/coredump.c      |  2 +-
 fs/inode.c         |  7 ++++---
 fs/namei.c         |  2 +-
 fs/open.c          | 16 ++++++++--------
 fs/utimes.c        |  2 +-
 include/linux/fs.h |  7 ++++---
 7 files changed, 24 insertions(+), 21 deletions(-)

diff --git a/fs/attr.c b/fs/attr.c
index 6f66abb876e5..dd9d90352982 100644
--- a/fs/attr.c
+++ b/fs/attr.c
@@ -279,7 +279,8 @@ EXPORT_SYMBOL(setattr_copy);
  * permissions. On non-idmapped mounts or if permission checking is to be
  * performed on the raw inode simply passs init_user_ns.
  */
-int notify_change2(struct vfsmount *mnt, struct dentry * dentry, struct iattr * attr, struct inode **delegated_inode)
+int notify_change2(struct vfsmount *mnt, struct user_namespace *mnt_userns, struct dentry * dentry,
+		  struct iattr *attr, struct inode **delegated_inode)
 {
 	struct inode *inode = dentry->d_inode;
 	umode_t mode = inode->i_mode;
@@ -394,7 +395,7 @@ int notify_change2(struct vfsmount *mnt, struct dentry * dentry, struct iattr *
 		return error;
 
 	if (mnt && inode->i_op->setattr2)
-		error = inode->i_op->setattr2(mnt, dentry, attr);
+		error = inode->i_op->setattr2(mnt, mnt_userns, dentry, attr);
 	else if (inode->i_op->setattr)
 		error = inode->i_op->setattr(mnt_userns, dentry, attr);
 	else
@@ -410,8 +411,8 @@ int notify_change2(struct vfsmount *mnt, struct dentry * dentry, struct iattr *
 }
 EXPORT_SYMBOL(notify_change2);
 
-int notify_change(struct dentry * dentry, struct iattr * attr, struct inode **delegated_inode)
+int notify_change(struct user_namespace *mnt_userns, struct dentry * dentry, struct iattr * attr, struct inode **delegated_inode)
 {
-	return notify_change2(NULL, dentry, attr, delegated_inode);
+	return notify_change2(NULL, mnt_userns, dentry, attr, delegated_inode);
 }
 EXPORT_SYMBOL(notify_change);
diff --git a/fs/coredump.c b/fs/coredump.c
index 8daafb23829e..5c494a0ee345 100644
--- a/fs/coredump.c
+++ b/fs/coredump.c
@@ -788,7 +788,7 @@ void do_coredump(const kernel_siginfo_t *siginfo)
 			goto close_fail;
 		if (!(cprm.file->f_mode & FMODE_CAN_WRITE))
 			goto close_fail;
-		if (do_truncate2(cprm.file->f_path.mnt, cprm.file->f_path.dentry, 0, 0, cprm.file))
+		if (do_truncate2(cprm.file->f_path.mnt, mnt_userns, cprm.file->f_path.dentry, 0, 0, cprm.file))
 			goto close_fail;
 	}
 
diff --git a/fs/inode.c b/fs/inode.c
index ca5c8eb4f6f3..b7342e3df266 100644
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -1906,7 +1906,8 @@ int dentry_needs_remove_privs(struct dentry *dentry)
 	return mask;
 }
 
-static int __remove_privs(struct vfsmount *mnt, struct dentry *dentry, int kill)
+static int __remove_privs(struct vfsmount *mnt, struct user_namespace *mnt_userns,
+			  struct dentry *dentry, int kill)
 {
 	struct iattr newattrs;
 
@@ -1915,7 +1916,7 @@ static int __remove_privs(struct vfsmount *mnt, struct dentry *dentry, int kill)
 	 * Note we call this on write, so notify_change will not
 	 * encounter any conflicting delegations:
 	 */
-	return notify_change2(mnt, dentry, &newattrs, NULL);
+	return notify_change2(mnt, mnt_userns, dentry, &newattrs, NULL);
 }
 
 /*
@@ -1942,7 +1943,7 @@ int file_remove_privs(struct file *file)
 	if (kill < 0)
 		return kill;
 	if (kill)
-		error = __remove_privs(file->f_path.mnt, dentry, kill);
+		error = __remove_privs(file->f_path.mnt, file_mnt_user_ns(file), dentry, kill);
 	if (!error)
 		inode_has_no_xattr(inode);
 
diff --git a/fs/namei.c b/fs/namei.c
index efd0c45a75ff..c1415743bcbc 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -3051,7 +3051,7 @@ static int handle_truncate(struct user_namespace *mnt_userns, struct file *filp)
 	if (!error)
 		error = security_path_truncate(path);
 	if (!error) {
-		error = do_truncate2(path->mnt, path->dentry, 0,
+		error = do_truncate2(path->mnt, mnt_userns, path->dentry, 0,
 				    ATTR_MTIME|ATTR_CTIME|ATTR_OPEN,
 				    filp);
 	}
diff --git a/fs/open.c b/fs/open.c
index 350a124d3201..47ce7802493d 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -35,7 +35,7 @@
 
 #include "internal.h"
 
-int do_truncate2(struct vfsmount *mnt, struct dentry *dentry, loff_t length,
+int do_truncate2(struct vfsmount *mnt, struct user_namespace *mnt_userns, struct dentry *dentry, loff_t length,
 		unsigned int time_attrs, struct file *filp)
 {
 	int ret;
@@ -61,14 +61,14 @@ int do_truncate2(struct vfsmount *mnt, struct dentry *dentry, loff_t length,
 
 	inode_lock(dentry->d_inode);
 	/* Note any delegations or leases have already been broken: */
-	ret = notify_change2(mnt, dentry, &newattrs, NULL);
+	ret = notify_change2(mnt, mnt_userns, dentry, &newattrs, NULL);
 	inode_unlock(dentry->d_inode);
 	return ret;
 }
-int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,
+int do_truncate(struct user_namespace *mnt_userns, struct dentry *dentry, loff_t length, unsigned int time_attrs,
 	struct file *filp)
 {
-	return do_truncate2(NULL, dentry, length, time_attrs, filp);
+	return do_truncate2(NULL, mnt_userns, dentry, length, time_attrs, filp);
 }
 
 long vfs_truncate(const struct path *path, loff_t length)
@@ -116,7 +116,7 @@ long vfs_truncate(const struct path *path, loff_t length)
 	if (!error)
 		error = security_path_truncate(path);
 	if (!error)
-		error = do_truncate2(mnt, path->dentry, length, 0, NULL);
+		error = do_truncate2(mnt, mnt_userns, path->dentry, length, 0, NULL);
 
 put_write_and_out:
 	put_write_access(inode);
@@ -202,7 +202,7 @@ long do_sys_ftruncate(unsigned int fd, loff_t length, int small)
 	if (!error)
 		error = security_path_truncate(&f.file->f_path);
 	if (!error)
-		error = do_truncate2(mnt, dentry, length, ATTR_MTIME|ATTR_CTIME, f.file);
+		error = do_truncate2(mnt, file_mnt_user_ns(f.file), dentry, length, ATTR_MTIME|ATTR_CTIME, f.file);
 	sb_end_write(inode->i_sb);
 out_putf:
 	fdput(f);
@@ -593,7 +593,7 @@ int chmod_common(const struct path *path, umode_t mode)
 		goto out_unlock;
 	newattrs.ia_mode = (mode & S_IALLUGO) | (inode->i_mode & ~S_IALLUGO);
 	newattrs.ia_valid = ATTR_MODE | ATTR_CTIME;
-	error = notify_change2(path->mnt, path->dentry, &newattrs, &delegated_inode);
+	error = notify_change2(path->mnt, mnt_user_ns(path->mnt), path->dentry, &newattrs, &delegated_inode);
 out_unlock:
 	inode_unlock(inode);
 	if (delegated_inode) {
@@ -689,7 +689,7 @@ int chown_common(const struct path *path, uid_t user, gid_t group)
 	inode_lock(inode);
 	error = security_path_chown(path, uid, gid);
 	if (!error)
-		error = notify_change2(path->mnt, path->dentry, &newattrs, &delegated_inode);
+		error = notify_change2(path->mnt, mnt_userns, path->dentry, &newattrs, &delegated_inode);
 	inode_unlock(inode);
 	if (delegated_inode) {
 		error = break_deleg_wait(&delegated_inode);
diff --git a/fs/utimes.c b/fs/utimes.c
index 721298d3957c..9e6a0898f3c0 100644
--- a/fs/utimes.c
+++ b/fs/utimes.c
@@ -62,7 +62,7 @@ int vfs_utimes(const struct path *path, struct timespec64 *times)
 	}
 retry_deleg:
 	inode_lock(inode);
-	error = notify_change2(path->mnt, path->dentry, &newattrs, &delegated_inode);
+	error = notify_change2(path->mnt, mnt_user_ns(path->mnt), path->dentry, &newattrs, &delegated_inode);
 	inode_unlock(inode);
 	if (delegated_inode) {
 		error = break_deleg_wait(&delegated_inode);
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 006ca37e5181..382ba7facad9 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -1962,7 +1962,7 @@ struct inode_operations {
 			struct inode *, struct dentry *, unsigned int);
 	int (*setattr) (struct user_namespace *, struct dentry *,
 			struct iattr *);
-	int (*setattr2) (struct vfsmount *, struct dentry *, struct iattr *);
+	int (*setattr2) (struct vfsmount *, struct user_namespace *, struct dentry *, struct iattr *);
 	int (*getattr) (struct user_namespace *, const struct path *,
 			struct kstat *, u32, unsigned int);
 	ssize_t (*listxattr) (struct dentry *, char *, size_t);
@@ -2644,7 +2644,7 @@ static inline struct user_namespace *file_mnt_user_ns(struct file *file)
 extern long vfs_truncate(const struct path *, loff_t);
 int do_truncate(struct user_namespace *, struct dentry *, loff_t start,
 		unsigned int time_attrs, struct file *filp);
-extern int do_truncate2(struct vfsmount *, struct dentry *, loff_t start,
+extern int do_truncate2(struct vfsmount *, struct user_namespace *, struct dentry *, loff_t start,
 			unsigned int time_attrs, struct file *filp);
 extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
 			loff_t len);
@@ -2884,7 +2884,8 @@ static inline int bmap(struct inode *inode,  sector_t *block)
 
 int notify_change(struct user_namespace *, struct dentry *,
 		  struct iattr *, struct inode **);
-extern int notify_change2(struct vfsmount *, struct dentry *, struct iattr *, struct inode **);
+extern int notify_change2(struct vfsmount *, struct user_namespace *, struct dentry *,
+			struct iattr *, struct inode **);
 int inode_permission(struct user_namespace *, struct inode *, int);
 extern int inode_permission2(struct vfsmount *, struct inode *, int);
 int generic_permission(struct user_namespace *, struct inode *, int);
-- 
2.17.1

