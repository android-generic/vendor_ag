From f01ba53e932d36175e2f68ae2c49434ee91e9dfb Mon Sep 17 00:00:00 2001
From: Tom Marshall <tdm@cyngn.com>
Date: Thu, 5 Nov 2015 11:20:54 -0800
Subject: [PATCH 1/2] vold: Honor mount options for ext4/f2fs partitions

 * Save mount options and fstype for DiskPartition objects
 * Pass mount options and fstype to PublicVolume ctor
 * Pass mount options to ext4::Mount/f2fs:Mount
 * Use specified/default fstype if blkid fails

This is trivially extensible for other fs types.

[mikeioannina] Adapt for Pie
[cwhuang] Adapt for Android Q

Change-Id: Ie5dd27f26a4a7129dd9efe6a7ad0a589928282a0
---
 VolumeManager.cpp       |  3 ++-
 VolumeManager.h         | 12 ++++++++++--
 fs/Ext4.cpp             |  5 +++--
 fs/Ext4.h               |  2 +-
 fs/F2fs.cpp             |  5 +++--
 fs/F2fs.h               |  2 +-
 main.cpp                |  3 ++-
 model/Disk.cpp          |  6 ++++--
 model/Disk.h            |  4 +++-
 model/DiskPartition.cpp |  9 ++++++---
 model/DiskPartition.h   |  7 ++++++-
 model/PrivateVolume.cpp |  2 +-
 model/PublicVolume.cpp  |  9 ++++++---
 model/PublicVolume.h    |  5 ++++-
 14 files changed, 52 insertions(+), 22 deletions(-)

diff --git a/VolumeManager.cpp b/VolumeManager.cpp
index 62e88cb..4ca3817 100644
--- a/VolumeManager.cpp
+++ b/VolumeManager.cpp
@@ -247,7 +247,8 @@ void VolumeManager::handleBlockEvent(NetlinkEvent* evt) {
                         new android::vold::Disk(eventPath, device, source->getNickname(), flags) :
                         new android::vold::DiskPartition(eventPath, device,
                                 source->getNickname(), flags,
-                                source->getPartNum());
+                                source->getPartNum(),
+                                source->getFsType(), source->getMntOpts());
                     handleDiskAdded(std::shared_ptr<android::vold::Disk>(disk));
                     break;
                 }
diff --git a/VolumeManager.h b/VolumeManager.h
index de561f3..8b2f563 100644
--- a/VolumeManager.h
+++ b/VolumeManager.h
@@ -63,8 +63,12 @@ class VolumeManager {
 
     class DiskSource {
       public:
-        DiskSource(const std::string& sysPattern, const std::string& nickname, int partnum, int flags) :
-                mSysPattern(sysPattern), mNickname(nickname), mPartNum(partnum), mFlags(flags) {
+        DiskSource(const std::string& sysPattern, const std::string& nickname,
+                        int partnum, int flags,
+                        const std::string& fstype, const std::string mntopts) :
+                mSysPattern(sysPattern), mNickname(nickname),
+                mPartNum(partnum), mFlags(flags),
+                mFsType(fstype), mMntOpts(mntopts) {
         }
 
         bool matches(const std::string& sysPath) {
@@ -74,12 +78,16 @@ class VolumeManager {
         const std::string& getNickname() const { return mNickname; }
         int getPartNum() const { return mPartNum; }
         int getFlags() const { return mFlags; }
+        const std::string& getFsType() const { return mFsType; }
+        const std::string& getMntOpts() const { return mMntOpts; }
 
       private:
         std::string mSysPattern;
         std::string mNickname;
         int mPartNum;
         int mFlags;
+        std::string mFsType;
+        std::string mMntOpts;
     };
 
     void addDiskSource(const std::shared_ptr<DiskSource>& diskSource);
diff --git a/fs/Ext4.cpp b/fs/Ext4.cpp
index 6bc7ad2..d41dc85 100644
--- a/fs/Ext4.cpp
+++ b/fs/Ext4.cpp
@@ -124,12 +124,13 @@ status_t Check(const std::string& source, const std::string& target) {
 }
 
 status_t Mount(const std::string& source, const std::string& target, bool ro, bool remount,
-               bool executable) {
+               bool executable, const std::string& opts /* = "" */) {
     int rc;
     unsigned long flags;
 
     const char* c_source = source.c_str();
     const char* c_target = target.c_str();
+    const char* c_opts = opts.c_str();
 
     flags = MS_NOATIME | MS_NODEV | MS_NOSUID | MS_DIRSYNC;
 
@@ -137,7 +138,7 @@ status_t Mount(const std::string& source, const std::string& target, bool ro, bo
     flags |= (ro ? MS_RDONLY : 0);
     flags |= (remount ? MS_REMOUNT : 0);
 
-    rc = mount(c_source, c_target, "ext4", flags, NULL);
+    rc = mount(c_source, c_target, "ext4", flags, c_opts);
 
     if (rc && errno == EROFS) {
         LOG(ERROR) << source << " appears to be a read only filesystem - retrying mount RO";
diff --git a/fs/Ext4.h b/fs/Ext4.h
index 329f302..ec32ed3 100644
--- a/fs/Ext4.h
+++ b/fs/Ext4.h
@@ -29,7 +29,7 @@ bool IsSupported();
 
 status_t Check(const std::string& source, const std::string& target);
 status_t Mount(const std::string& source, const std::string& target, bool ro, bool remount,
-               bool executable);
+               bool executable, const std::string& opts = "");
 status_t Format(const std::string& source, unsigned long numSectors, const std::string& target);
 status_t Resize(const std::string& source, unsigned long numSectors);
 
diff --git a/fs/F2fs.cpp b/fs/F2fs.cpp
index 9b8d2c4..c8a3eac 100644
--- a/fs/F2fs.cpp
+++ b/fs/F2fs.cpp
@@ -51,12 +51,13 @@ status_t Check(const std::string& source) {
     return ForkExecvp(cmd, nullptr, sFsckContext);
 }
 
-status_t Mount(const std::string& source, const std::string& target) {
+status_t Mount(const std::string& source, const std::string& target, const std::string& opts /* = "" */) {
     const char* c_source = source.c_str();
     const char* c_target = target.c_str();
+    const char* c_opts = opts.c_str();
     unsigned long flags = MS_NOATIME | MS_NODEV | MS_NOSUID | MS_DIRSYNC;
 
-    int res = mount(c_source, c_target, "f2fs", flags, NULL);
+    int res = mount(c_source, c_target, "f2fs", flags, c_opts);
     if (res != 0) {
         PLOG(ERROR) << "Failed to mount " << source;
         if (errno == EROFS) {
diff --git a/fs/F2fs.h b/fs/F2fs.h
index f710212..8dc8ae4 100644
--- a/fs/F2fs.h
+++ b/fs/F2fs.h
@@ -28,7 +28,7 @@ namespace f2fs {
 bool IsSupported();
 
 status_t Check(const std::string& source);
-status_t Mount(const std::string& source, const std::string& target);
+status_t Mount(const std::string& source, const std::string& target, const std::string& opts = "");
 status_t Format(const std::string& source);
 
 }  // namespace f2fs
diff --git a/main.cpp b/main.cpp
index 5718c53..7fa43f4 100644
--- a/main.cpp
+++ b/main.cpp
@@ -259,7 +259,8 @@ static int process_config(VolumeManager* vm, bool* has_adoptable, bool* has_quot
             }
 
             vm->addDiskSource(std::shared_ptr<VolumeManager::DiskSource>(
-                new VolumeManager::DiskSource(sysPattern, nickname, entry.partnum, flags)));
+                new VolumeManager::DiskSource(sysPattern, nickname, entry.partnum,
+                                flags, entry.fs_type, entry.fs_options)));
         }
     }
     return 0;
diff --git a/model/Disk.cpp b/model/Disk.cpp
index 5d7380d..8ce0043 100644
--- a/model/Disk.cpp
+++ b/model/Disk.cpp
@@ -172,8 +172,10 @@ status_t Disk::destroy() {
     return OK;
 }
 
-void Disk::createPublicVolume(dev_t device) {
-    auto vol = std::shared_ptr<VolumeBase>(new PublicVolume(device));
+void Disk::createPublicVolume(dev_t device,
+                const std::string& fstype /* = "" */,
+                const std::string& mntopts /* = "" */) {
+    auto vol = std::shared_ptr<VolumeBase>(new PublicVolume(device, fstype, mntopts));
     if (mJustPartitioned) {
         LOG(DEBUG) << "Device just partitioned; silently formatting";
         vol->setSilent(true);
diff --git a/model/Disk.h b/model/Disk.h
index a2c7ee2..e6f8703 100644
--- a/model/Disk.h
+++ b/model/Disk.h
@@ -118,7 +118,9 @@ class Disk {
     /* Flag that we need to skip first disk change events after partitioning*/
     bool mSkipChange;
 
-    void createPublicVolume(dev_t device);
+    void createPublicVolume(dev_t device,
+                    const std::string& fstype = "",
+                    const std::string& mntopts = "");
     void createPrivateVolume(dev_t device, const std::string& partGuid);
     void createStubVolume();
 
diff --git a/model/DiskPartition.cpp b/model/DiskPartition.cpp
index 1cbcfbb..10b2f95 100644
--- a/model/DiskPartition.cpp
+++ b/model/DiskPartition.cpp
@@ -44,9 +44,12 @@ namespace android {
 namespace vold {
 
 DiskPartition::DiskPartition(const std::string& eventPath, dev_t device,
-            const std::string& nickname, int flags, int partnum) :
+            const std::string& nickname, int flags, int partnum,
+            const std::string& fstype /* = "" */, const std::string& mntopts /* = "" */) :
         Disk(eventPath, device, nickname, flags),
-        mPartNum(partnum) {
+        mPartNum(partnum),
+        mFsType(fstype),
+        mMntOpts(mntopts) {
     // Empty
 }
 
@@ -60,7 +63,7 @@ status_t DiskPartition::create() {
     auto listener = VolumeManager::Instance()->getListener();
     if (listener) listener->onDiskCreated(getId(), mFlags);
     dev_t partDevice = makedev(major(mDevice), minor(mDevice) + mPartNum);
-    createPublicVolume(partDevice);
+    createPublicVolume(partDevice, mFsType, mMntOpts);
     return OK;
 }
 
diff --git a/model/DiskPartition.h b/model/DiskPartition.h
index 274d6be..7756271 100644
--- a/model/DiskPartition.h
+++ b/model/DiskPartition.h
@@ -31,7 +31,8 @@ class DiskPartition : public Disk {
 public:
     DiskPartition(const std::string& eventPath, dev_t device,
             const std::string& nickname,
-            int flags, int partnum);
+             int flags, int partnum,
+            const std::string& fstype = "", const std::string& mntopts = "");
     virtual ~DiskPartition();
 
     virtual status_t create();
@@ -44,6 +45,10 @@ public:
 private:
     /* Partition number */
     int mPartNum;
+    /* Filesystem type */
+    std::string mFsType;
+    /* Mount options */
+    std::string mMntOpts;
 };
 
 }  // namespace vold
diff --git a/model/PrivateVolume.cpp b/model/PrivateVolume.cpp
index f3fa877..d668e80 100644
--- a/model/PrivateVolume.cpp
+++ b/model/PrivateVolume.cpp
@@ -177,7 +177,7 @@ status_t PrivateVolume::doMount() {
             return -EIO;
         }
 
-        if (f2fs::Mount(mDmDevPath, mPath)) {
+        if (f2fs::Mount(mDmDevPath, mPath, "")) {
             PLOG(ERROR) << getId() << " failed to mount";
             return -EIO;
         }
diff --git a/model/PublicVolume.cpp b/model/PublicVolume.cpp
index 43c5719..2049219 100644
--- a/model/PublicVolume.cpp
+++ b/model/PublicVolume.cpp
@@ -50,7 +50,10 @@ static const char* kSdcardFsPath = "/system/bin/sdcard";
 
 static const char* kAsecPath = "/mnt/secure/asec";
 
-PublicVolume::PublicVolume(dev_t device) : VolumeBase(Type::kPublic), mDevice(device) {
+PublicVolume::PublicVolume(dev_t device, const std::string& fstype /* = "" */,
+                           const std::string& mntopts /* = "" */) :
+        VolumeBase(Type::kPublic), mDevice(device),
+        mFsType(fstype), mMntOpts(mntopts)  {
     setId(StringPrintf("public:%u,%u", major(device), minor(device)));
     mDevPath = StringPrintf("/dev/block/vold/%s", getId().c_str());
     mFuseMounted = false;
@@ -156,9 +159,9 @@ status_t PublicVolume::doMount() {
         ret = exfat::Mount(mDevPath, mRawPath, AID_ROOT,
                            (isVisible ? AID_MEDIA_RW : AID_EXTERNAL_STORAGE), 0007);
     } else if (mFsType == "ext4") {
-        ret = ext4::Mount(mDevPath, mRawPath, false, false, true);
+        ret = ext4::Mount(mDevPath, mRawPath, false, false, true, mMntOpts);
     } else if (mFsType == "f2fs") {
-        ret = f2fs::Mount(mDevPath, mRawPath);
+        ret = f2fs::Mount(mDevPath, mRawPath, mMntOpts);
     } else if (mFsType == "ntfs") {
         ret = ntfs::Mount(mDevPath, mRawPath, AID_ROOT,
                           (isVisible ? AID_MEDIA_RW : AID_EXTERNAL_STORAGE), 0007);
diff --git a/model/PublicVolume.h b/model/PublicVolume.h
index 3156b53..655a2a3 100644
--- a/model/PublicVolume.h
+++ b/model/PublicVolume.h
@@ -39,7 +39,8 @@ namespace vold {
  */
 class PublicVolume : public VolumeBase {
   public:
-    explicit PublicVolume(dev_t device);
+    PublicVolume(dev_t device, const std::string& mntopts = "",
+                    const std::string& fstype = "");
     virtual ~PublicVolume();
 
   protected:
@@ -77,6 +78,8 @@ class PublicVolume : public VolumeBase {
     std::string mFsUuid;
     /* User-visible filesystem label */
     std::string mFsLabel;
+    /* Mount options */
+    std::string mMntOpts;
 
     DISALLOW_COPY_AND_ASSIGN(PublicVolume);
 };
-- 
2.17.1

