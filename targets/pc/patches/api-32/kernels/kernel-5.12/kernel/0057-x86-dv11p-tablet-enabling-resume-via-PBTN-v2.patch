From 36d7bc139c99b9427fb538a6b1a198165faff084 Mon Sep 17 00:00:00 2001
From: Mauro Rossi <issor.oruam@gmail.com>
Date: Sun, 28 Feb 2021 01:51:48 +0100
Subject: [PATCH 057/100] x86: dv11p-tablet: enabling resume via PBTN (v2)

A patch from https://bugzilla.kernel.org/show_bug.cgi?id=102281#c51
by Alexander Diewald.

(v2)
Changes due to commit:
f1e1ea516721 ("platform/x86: Move all dell drivers to their own subdirectory")
---
 drivers/acpi/acpica/evgpeutil.c          |   1 +
 drivers/platform/x86/dell/Kconfig        |   6 +
 drivers/platform/x86/dell/Makefile       |   1 +
 drivers/platform/x86/dell/dv11p-tablet.c | 249 +++++++++++++++++++++++
 4 files changed, 257 insertions(+)
 create mode 100644 drivers/platform/x86/dell/dv11p-tablet.c

diff --git a/drivers/acpi/acpica/evgpeutil.c b/drivers/acpi/acpica/evgpeutil.c
index 2e74308d7725..ea2f223d92a2 100644
--- a/drivers/acpi/acpica/evgpeutil.c
+++ b/drivers/acpi/acpica/evgpeutil.c
@@ -71,6 +71,7 @@ acpi_ev_walk_gpe_list(acpi_gpe_callback gpe_walk_callback, void *context)
 	acpi_os_release_lock(acpi_gbl_gpe_lock, flags);
 	return_ACPI_STATUS(status);
 }
+ACPI_EXPORT_SYMBOL(acpi_ev_walk_gpe_list)
 
 /*******************************************************************************
  *
diff --git a/drivers/platform/x86/dell/Kconfig b/drivers/platform/x86/dell/Kconfig
index e0a55337f51a..dcb42d771bdd 100644
--- a/drivers/platform/x86/dell/Kconfig
+++ b/drivers/platform/x86/dell/Kconfig
@@ -204,4 +204,10 @@ config DELL_WMI_SYSMAN
 	  To compile this driver as a module, choose M here: the module will
 	  be called dell-wmi-sysman.
 
+config DV11P_TABLET
+	tristate "Dell Venue 11 Pro Tablet support"
+	depends on ACPI
+	---help---
+	  This driver provides power button support and docking events for the Dell Venue 11 Pro tablet.
+
 endif # X86_PLATFORM_DRIVERS_DELL
diff --git a/drivers/platform/x86/dell/Makefile b/drivers/platform/x86/dell/Makefile
index d720a3e42ae3..65054fd56ca2 100644
--- a/drivers/platform/x86/dell/Makefile
+++ b/drivers/platform/x86/dell/Makefile
@@ -19,3 +19,4 @@ obj-$(CONFIG_DELL_WMI_AIO)		+= dell-wmi-aio.o
 obj-$(CONFIG_DELL_WMI_DESCRIPTOR)	+= dell-wmi-descriptor.o
 obj-$(CONFIG_DELL_WMI_LED)		+= dell-wmi-led.o
 obj-$(CONFIG_DELL_WMI_SYSMAN)		+= dell-wmi-sysman/
+obj-$(CONFIG_DV11P_TABLET)      	+= dv11p-tablet.o
diff --git a/drivers/platform/x86/dell/dv11p-tablet.c b/drivers/platform/x86/dell/dv11p-tablet.c
new file mode 100644
index 000000000000..f6461cee85c0
--- /dev/null
+++ b/drivers/platform/x86/dell/dv11p-tablet.c
@@ -0,0 +1,249 @@
+/*
+ * Tablet support (power button, docking events) for Dell Venue 11 Pro
+ *
+ * (C) Copyright 2015,2016 Jan-Michael Brummer
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; version 2
+ * of the License.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/input.h>
+#include <linux/acpi.h>
+#include <acpi/button.h>
+#include "../../acpi/acpica/aclocal.h"
+#include "../../acpi/acpica/acevents.h"
+
+#define DV11P_TABLET_HID			"INT33D6"
+#define DV11P_TABLET_DEVICE_NAME		"Dell Venue 11 Pro Tablet"
+
+#define DV11P_TABLET_NOTIFY_PRESS_POWER		0xc1
+#define DV11P_TABLET_NOTIFY_RELEASE_POWER	0xc0
+
+#define DV11P_TABLET_NOTIFY_DOCK_MODE_ON	0xca
+#define DV11P_TABLET_NOTIFY_DOCK_MODE_OFF	0xcb
+
+#define DV11P_TABLET_NOTIFY_TABLET_MODE_ON	0xcc
+#define DV11P_TABLET_NOTIFY_TABLET_MODE_OFF	0xcd
+
+#define DV11P_TABLET_PBTN_GPE_NUMBER 		0x08
+
+
+ACPI_MODULE_NAME("dell venue 11 pro tablet support");
+
+MODULE_AUTHOR("Jan-Michael Brummer");
+MODULE_DESCRIPTION("Dell Venue 11 Pro Tablet Driver");
+MODULE_LICENSE("GPL v2");
+
+/*
+ * Power button and events are handled by EC
+ */
+static const struct acpi_device_id dv11p_tablet_device_ids[] = {
+	{DV11P_TABLET_HID,    0},
+	{"", 0},
+};
+
+MODULE_DEVICE_TABLE(acpi, dv11p_tablet_device_ids);
+
+struct dv11p_tablet {
+	unsigned int type;
+	struct input_dev *input;
+	char phys[32];			/* for input device */
+	unsigned long pushed;
+	bool suspended;
+	bool ignore_next_pbtn_event;
+};
+
+static void dv11p_tablet_notify(struct acpi_device *device, u32 event)
+{
+	struct dv11p_tablet *tablet = acpi_driver_data(device);
+	struct input_dev *input;
+	int key_code = KEY_RESERVED;
+	bool pressed = false;
+	bool dock_mode = false;
+	bool dock_mode_set = false;
+	bool tablet_mode = false;
+	bool tablet_mode_set = false;
+
+	switch (event) {
+	/* Power button press, release handle */
+	case DV11P_TABLET_NOTIFY_PRESS_POWER:
+		pressed = true;
+		/* fall through */
+	case DV11P_TABLET_NOTIFY_RELEASE_POWER:
+		key_code = KEY_POWER;
+		break;
+	/* Tablet dock mode on / off */
+	case DV11P_TABLET_NOTIFY_DOCK_MODE_ON:
+		dock_mode = true;
+		/* fall through */
+	case DV11P_TABLET_NOTIFY_DOCK_MODE_OFF:
+		dock_mode_set = true;
+		break;
+	/* Tablet mode on / off */
+	case DV11P_TABLET_NOTIFY_TABLET_MODE_ON:
+		tablet_mode = true;
+		/* fall through */
+	case DV11P_TABLET_NOTIFY_TABLET_MODE_OFF:
+		tablet_mode_set = true;
+		break;
+	default:
+		dev_info_ratelimited(&device->dev,
+				  "Unsupported event [0x%x]\n", event);
+		break;
+	}
+
+	if ((KEY_RESERVED == key_code) && !dock_mode_set && !tablet_mode_set)
+		return;
+	if (pressed)
+		pm_wakeup_event(&device->dev, 0);
+	if (tablet->suspended) {
+		if(key_code == KEY_POWER) {
+			tablet->ignore_next_pbtn_event = true;
+		}
+		return;
+	}
+	if (tablet->ignore_next_pbtn_event) {
+		tablet->ignore_next_pbtn_event = false;
+		return;
+	}
+
+	input = tablet->input;
+
+	if (key_code != KEY_RESERVED) {
+		/* Report button press event */
+		input_report_key(input, key_code, pressed);
+	} else if (dock_mode_set) {
+		/* Report un/dock mode */
+		input_report_switch(input, SW_DOCK, dock_mode);
+	} else if (tablet_mode_set) {
+		/* Report tablet mode */
+		input_report_switch(input, SW_TABLET_MODE, tablet_mode);
+	}
+
+	input_sync(input);
+}
+
+#ifdef CONFIG_PM_SLEEP
+static acpi_status
+acpi_hw_correct_pbtn_gpe_wake_mask(struct acpi_gpe_xrupt_info *gpe_xrupt_info,
+				struct acpi_gpe_block_info *gpe_block,
+				void *context)
+{
+	u32 i;
+	struct acpi_gpe_register_info *gpe_register_info;
+
+	/* Examine each GPE Register within the block */
+
+	for (i = 0; i < gpe_block->register_count; i++) {
+		gpe_register_info = &gpe_block->register_info[i];
+
+		if (gpe_register_info->base_gpe_number == DV11P_TABLET_PBTN_GPE_NUMBER) {
+			gpe_register_info->enable_for_wake = gpe_register_info->enable_for_run;
+			return AE_OK;
+		}
+	}
+	return AE_NOT_FOUND;
+}
+
+static int dv11p_tablet_suspend(struct device *dev)
+{
+	struct acpi_device *device = to_acpi_device(dev);
+	struct dv11p_tablet *tablet = acpi_driver_data(device);
+
+	// Set the mask for the GPE associated with the power button to the
+	// value of the run mask, otherwise resuming is not possible with the
+	// power button.
+	acpi_ev_walk_gpe_list(acpi_hw_correct_pbtn_gpe_wake_mask, NULL);
+
+	tablet->suspended = true;
+	return 0;
+}
+
+static int dv11p_tablet_resume(struct device *dev)
+{
+	struct acpi_device *device = to_acpi_device(dev);
+	struct dv11p_tablet *tablet = acpi_driver_data(device);
+
+	tablet->suspended = false;
+	return 0;
+}
+#endif
+
+static int dv11p_tablet_add(struct acpi_device *device)
+{
+	struct dv11p_tablet *tablet;
+	struct input_dev *input;
+	const char *hid = acpi_device_hid(device);
+	char *name;
+	int error;
+
+	tablet = kzalloc(sizeof(struct dv11p_tablet), GFP_KERNEL);
+	if (!tablet)
+		return -ENOMEM;
+
+	device->driver_data = tablet;
+
+	tablet->input = input = input_allocate_device();
+	if (!input) {
+		error = -ENOMEM;
+		goto err_free_tablet;
+	}
+
+	name = acpi_device_name(device);
+	strcpy(name, DV11P_TABLET_DEVICE_NAME);
+	snprintf(tablet->phys, sizeof(tablet->phys), "%s/buttons", hid);
+
+	input->name = name;
+	input->phys = tablet->phys;
+	input->id.bustype = BUS_HOST;
+	input->dev.parent = &device->dev;
+	input_set_capability(input, EV_KEY, KEY_POWER);
+	input_set_capability(input, EV_SW, SW_DOCK);
+	input_set_capability(input, EV_SW, SW_TABLET_MODE);
+
+	error = input_register_device(input);
+	if (error)
+		goto err_free_input;
+
+	dev_info(&device->dev,
+			"%s [%s]\n", name, acpi_device_bid(device));
+	return 0;
+
+ err_free_input:
+	input_free_device(input);
+ err_free_tablet:
+	kfree(tablet);
+	return error;
+}
+
+static int dv11p_tablet_remove(struct acpi_device *device)
+{
+	struct dv11p_tablet *tablet = acpi_driver_data(device);
+
+	input_unregister_device(tablet->input);
+	kfree(tablet);
+	return 0;
+}
+
+static SIMPLE_DEV_PM_OPS(dv11p_tablet_pm,
+		dv11p_tablet_suspend, dv11p_tablet_resume);
+
+static struct acpi_driver dv11p_tablet_driver = {
+	.name = "dell venue 11 pro tablet",
+	.class = "DellVenue11Pro",
+	.ids = dv11p_tablet_device_ids,
+	.ops = {
+		.add = dv11p_tablet_add,
+		.remove = dv11p_tablet_remove,
+		.notify = dv11p_tablet_notify,
+	},
+	.drv.pm = &dv11p_tablet_pm,
+};
+
+module_acpi_driver(dv11p_tablet_driver);
-- 
2.17.1

